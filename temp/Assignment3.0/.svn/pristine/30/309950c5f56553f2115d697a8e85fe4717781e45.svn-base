from flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash
import xmltodict
import os.path
import json
from xml_helper import xml_obj
from collections import OrderedDict


APP_ROOT = os.path.dirname(os.path.abspath(__file__))
APP_STATIC = os.path.join(APP_ROOT, 'static')
APP_TEMPLATES = os.path.join(APP_ROOT, 'templates')
APP_SVN = "https://subversion.ews.illinois.edu/svn/sp16-cs242/suharli2/"
xml_list = os.path.join(APP_STATIC, 'svn_list.xml')
xml_log = os.path.join(APP_STATIC, 'svn_log.xml')
xml = xml_obj(xml_list, xml_log)
app = Flask(__name__)


@app.route('/')
def home():
    dict = xml.get_projects()
    result = OrderedDict(sorted(dict.items(), key=lambda t: t[0]))
    return render_template('index.html', projects=result)


@app.route('/tree/<path:url>')
def directory(url):
    files = OrderedDict(sorted(xml.get_files(url).items()), key=lambda t:t[0])
    dirs = OrderedDict(sorted(xml.get_dirs(url).items(), key=lambda t:t[0]))
    log = {}
    url_split = url.split('/')
    print(url)
    return render_template('show.html', files=files, dirs=dirs, url=url_split, APP_SVN=APP_SVN, _url=url, log=log)


@app.route('/rev/<int:rev>')
def revision(rev):
    dict = xml.get_log_by_rev(rev)
    return render_template('revision.html', dict=dict, APP_SVN=APP_SVN)


@app.route('/hist/<path:url>')
def history(url):
    result = dict()
    set = xml.get_rev_history(url)
    for rev in set:
        print(rev)
        result[rev] = xml.get_log_by_rev(rev)
    result = OrderedDict(sorted(result.items(), key=lambda t: t[0], reverse=True))
    print(result)
    return render_template('history.html', dict=result, url_=url)

@app.route('/all')
def all_rev():
    result = OrderedDict(sorted(xml.get_all_rev().items(), key=lambda t: t[0]))
    return render_template('all_revision.html', dict=result)

if __name__ == '__main__':
    app.run(debug=True)
